<?php

namespace Hamidrezaniazi\Pecs\Tests\Feature;

use Carbon\Carbon;
use Carbon\CarbonTimeZone;
use Hamidrezaniazi\Pecs\EcsFieldsCollection;
use Hamidrezaniazi\Pecs\Fields\Agent;
use Hamidrezaniazi\Pecs\Fields\AutonomousSystem;
use Hamidrezaniazi\Pecs\Fields\Base;
use Hamidrezaniazi\Pecs\Fields\Client;
use Hamidrezaniazi\Pecs\Fields\Cloud;
use Hamidrezaniazi\Pecs\Fields\CodeSignature;
use Hamidrezaniazi\Pecs\Fields\Container;
use Hamidrezaniazi\Pecs\Fields\DataStream;
use Hamidrezaniazi\Pecs\Fields\Destination;
use Hamidrezaniazi\Pecs\Fields\Device;
use Hamidrezaniazi\Pecs\Fields\Dll;
use Hamidrezaniazi\Pecs\Fields\Dns;
use Hamidrezaniazi\Pecs\Fields\DnsAnswer;
use Hamidrezaniazi\Pecs\Fields\Ecs;
use Hamidrezaniazi\Pecs\Fields\Elf;
use Hamidrezaniazi\Pecs\Fields\ElfSection;
use Hamidrezaniazi\Pecs\Fields\ElfSegment;
use Hamidrezaniazi\Pecs\Fields\Email;
use Hamidrezaniazi\Pecs\Fields\EmailAttachment;
use Hamidrezaniazi\Pecs\Fields\Error;
use Hamidrezaniazi\Pecs\Fields\Event;
use Hamidrezaniazi\Pecs\Fields\Faas;
use Hamidrezaniazi\Pecs\Fields\File;
use Hamidrezaniazi\Pecs\Fields\Geo;
use Hamidrezaniazi\Pecs\Fields\Group;
use Hamidrezaniazi\Pecs\Fields\Hash;
use Hamidrezaniazi\Pecs\Fields\Host;
use Hamidrezaniazi\Pecs\Fields\Http;
use Hamidrezaniazi\Pecs\Fields\InterfaceField;
use Hamidrezaniazi\Pecs\Fields\Log;
use Hamidrezaniazi\Pecs\Fields\Macho;
use Hamidrezaniazi\Pecs\Fields\MachoSection;
use Hamidrezaniazi\Pecs\Fields\Network;
use Hamidrezaniazi\Pecs\Fields\Observer;
use Hamidrezaniazi\Pecs\Fields\Orchestrator;
use Hamidrezaniazi\Pecs\Fields\Organization;
use Hamidrezaniazi\Pecs\Fields\Os;
use Hamidrezaniazi\Pecs\Fields\Package;
use Hamidrezaniazi\Pecs\Fields\Pe;
use Hamidrezaniazi\Pecs\Fields\PeSection;
use Hamidrezaniazi\Pecs\Fields\Process;
use Hamidrezaniazi\Pecs\Fields\Registry;
use Hamidrezaniazi\Pecs\Fields\Related;
use Hamidrezaniazi\Pecs\Fields\Risk;
use Hamidrezaniazi\Pecs\Fields\Rule;
use Hamidrezaniazi\Pecs\Fields\Server;
use Hamidrezaniazi\Pecs\Fields\Service;
use Hamidrezaniazi\Pecs\Fields\Source;
use Hamidrezaniazi\Pecs\Fields\Threat;
use Hamidrezaniazi\Pecs\Fields\ThreatEnrichment;
use Hamidrezaniazi\Pecs\Fields\TLS;
use Hamidrezaniazi\Pecs\Fields\Tracing;
use Hamidrezaniazi\Pecs\Fields\Url;
use Hamidrezaniazi\Pecs\Fields\User;
use Hamidrezaniazi\Pecs\Fields\Vlan;
use Hamidrezaniazi\Pecs\Fields\Vulnerability;
use Hamidrezaniazi\Pecs\Fields\X509;
use Hamidrezaniazi\Pecs\Properties\AgentIdStatus;
use Hamidrezaniazi\Pecs\Properties\DataStreamType;
use Hamidrezaniazi\Pecs\Properties\DnsHeaderFlag;
use Hamidrezaniazi\Pecs\Properties\EventCategory;
use Hamidrezaniazi\Pecs\Properties\EventKind;
use Hamidrezaniazi\Pecs\Properties\EventOutcome;
use Hamidrezaniazi\Pecs\Properties\EventType;
use Hamidrezaniazi\Pecs\Properties\FaasTriggerType;
use Hamidrezaniazi\Pecs\Properties\FileAttribute;
use Hamidrezaniazi\Pecs\Properties\GeoPoint;
use Hamidrezaniazi\Pecs\Properties\HttpMethod;
use Hamidrezaniazi\Pecs\Properties\Listables\DnsAnswerList;
use Hamidrezaniazi\Pecs\Properties\Listables\DnsHeaderFlagList;
use Hamidrezaniazi\Pecs\Properties\Listables\ElfSectionList;
use Hamidrezaniazi\Pecs\Properties\Listables\ElfSegmentList;
use Hamidrezaniazi\Pecs\Properties\Listables\EmailAttachmentList;
use Hamidrezaniazi\Pecs\Properties\Listables\FileAttributeList;
use Hamidrezaniazi\Pecs\Properties\Listables\GroupList;
use Hamidrezaniazi\Pecs\Properties\Listables\MachoSectionList;
use Hamidrezaniazi\Pecs\Properties\Listables\PeSectionList;
use Hamidrezaniazi\Pecs\Properties\Listables\ProcessList;
use Hamidrezaniazi\Pecs\Properties\Listables\SoftwarePlatformList;
use Hamidrezaniazi\Pecs\Properties\Listables\ThreatEnrichmentList;
use Hamidrezaniazi\Pecs\Properties\NetworkDirection;
use Hamidrezaniazi\Pecs\Properties\OsType;
use Hamidrezaniazi\Pecs\Properties\PairList;
use Hamidrezaniazi\Pecs\Properties\Percent;
use Hamidrezaniazi\Pecs\Properties\Score;
use Hamidrezaniazi\Pecs\Properties\SoftwarePlatform;
use Hamidrezaniazi\Pecs\Properties\SoftwareType;
use Hamidrezaniazi\Pecs\Properties\ThreatConfidence;
use Hamidrezaniazi\Pecs\Properties\ThreatIndicatorType;
use Hamidrezaniazi\Pecs\Properties\ThreatMarkingTLP;
use Hamidrezaniazi\Pecs\Properties\ValueList;
use Hamidrezaniazi\Pecs\Tests\TestCase;

class EcsFieldsTest extends TestCase
{
    public function testItShouldFormatAnyEcsFieldCorrectly(): void
    {
        $agent = new Agent(
            buildOriginal: 'this is string',
            ephemeralId: '123-abc',
            id: '123-abc',
            name: 'string',
            type: 'string',
            version: '1.2.3',
        );

        $base = new Base(
            timestamp: Carbon::parse('2000-01-01 01:11:11.000000'),
            labels: (new PairList())->put('string', 'string'),
            message: 'this is string',
            tags: (new ValueList())->push('string'),
        );

        $client = new Client(
            address: '8.8.8.8',
            bytes: 123456,
            domain: 'string',
            ip: '8.8.8.8',
            mac: 'string',
            natIp: '8.8.8.8',
            natPort: 80,
            packets: 80,
            port: 80,
            registeredDomain: 'string',
            subdomain: 'string',
            topLevelDomain: 'string',
            as: new AutonomousSystem(
                number: 123456,
                organizationName: 'string',
            ),
            geo: new Geo(
                cityName: 'Tehran',
                continentCode: 'string',
                continentName: 'string',
                countryIsoCode: 'ir',
                countryName: 'Iran',
                location: new GeoPoint(
                    lat: '12345678.90',
                    lon: '98765432.10',
                ),
                name: 'string',
                postalCode: '1010 AA',
                regionIsoCode: 'ir',
                regionName: 'Iran',
                timezone: CarbonTimeZone::create('Asia/Tehran'),
            ),
            user: new User(
                domain: 'string',
                email: 'info@example.test',
                fullName: 'string',
                hash: 'aa11bb22cc33',
                id: '123-abc',
                name: 'string',
                roles: (new ValueList())->push('string'),
            ),
        );

        $cloud = new Cloud(
            accountId: '123-abc',
            accountName: 'string',
            availabilityZone: 'string',
            instanceId: '123-abc',
            instanceName: 'string',
            machineType: 'string',
            projectId: '123-abc',
            projectName: 'string',
            provider: 'string',
            region: 'string',
            serviceName: 'string',
            origin: new Cloud(
                accountId: '123-abc',
                accountName: 'string',
                availabilityZone: 'string',
                instanceId: '123-abc',
                instanceName: 'string',
                machineType: 'string',
                projectId: '123-abc',
                provider: 'string',
                region: 'string',
                serviceName: 'string',
            ),
            target: new Cloud(
                accountId: '123-abc',
                accountName: 'string',
                availabilityZone: 'string',
                instanceId: '123-abc',
                instanceName: 'string',
                machineType: 'string',
                projectId: '123-abc',
                provider: 'string',
                region: 'string',
                serviceName: 'string',
            ),
        );

        $container = new Container(
            cpuUsage: new Percent(55),
            diskReadBytes: 123456,
            diskWriteBytes: 123456,
            id: '123-abc',
            imageHashAll: (new ValueList())->push('string'),
            imageName: 'string',
            imageTag: (new ValueList())->push('string'),
            labels: (new PairList())->put('string', 'string'),
            memoryUsage: new Percent(55),
            name: 'string',
            networkEgressBytes: 123456,
            networkIngressBytes: 123456,
            runtime: 'string',
        );

        $dataStream = new DataStream(
            dataset: 'string',
            namespace: 'string',
            type: DataStreamType::LOGS,
        );

        $destination = new Destination(
            address: '8.8.8.8',
            bytes: 123456,
            domain: 'string',
            ip: '8.8.8.8',
            mac: 'string',
            natIp: '8.8.8.8',
            natPort: 80,
            packets: 80,
            port: 80,
            registeredDomain: 'string',
            subdomain: 'string',
            topLevelDomain: 'string',
            as: new AutonomousSystem(
                number: 123456,
                organizationName: 'string',
            ),
            geo: new Geo(
                cityName: 'Tehran',
                continentCode: 'string',
                continentName: 'string',
                countryIsoCode: 'ir',
                countryName: 'Iran',
                location: new GeoPoint(
                    lat: '12345678.90',
                    lon: '98765432.10',
                ),
                name: 'string',
                postalCode: '1010 AA',
                regionIsoCode: 'ir',
                regionName: 'Iran',
                timezone: CarbonTimeZone::create('Asia/Tehran'),
            ),
            user: new User(
                domain: 'string',
                email: 'info@example.test',
                fullName: 'string',
                hash: 'aa11bb22cc33',
                id: '123-abc',
                name: 'string',
                roles: (new ValueList())->push('string'),
            )
        );

        $device = new Device(
            id: '123-abc',
            manufacturer: 'string',
            modelIdentifier: 'string',
            modelName: 'string',
        );

        $dll = new Dll(
            name: 'string',
            path: 'string',
            codeSignature: new CodeSignature(
                digestAlgorithm: 'string',
                exists: true,
                signingId: 'string',
                status: 'string',
                subjectName: 'string',
                teamId: 'string',
                timestamp: Carbon::parse('2000-01-01 01:11:11.000000'),
                trusted: true,
                valid: true,
            ),
            hash: new Hash(
                md5: 'aa11bb22cc33',
                sha1: '11aa22bb33cc',
                sha256: 'aa11bb22cc33dd44ee55',
                sha512: 'string',
                ssdeep: 'string',
                tlsh: 'string',
            ),
            pe: new Pe(
                architecture: 'string',
                company: 'string',
                description: 'string',
                fileVersion: 'string',
                goImportHash: 'string',
                goImports: (new ValueList())->push('string'),
                goImportsNamesEntropy: 1.23,
                goImportsNamesVarEntropy: 1.23,
                goStripped: true,
                imphash: 'string',
                imports: (new ValueList())->push('string'),
                importsNamesEntropy: 1.23,
                importsNamesVarEntropy: 1.23,
                originalFileName: 'string',
                pehash: 'string',
                product: 'string',
                sections: (new PeSectionList())->push(new PeSection(
                    entropy: 1.23,
                    name: 'string',
                    physicalSize: 123456,
                    varEntropy: 1.23,
                    virtualSize: 123456,
                )),
            ),
        );

        $dns = new Dns(
            answers: (new DnsAnswerList())->push(new DnsAnswer(
                data: 'string',
                class: 'string',
                name: 'string',
                ttl: 123456,
                type: 'string',
            )),
            headerFlags: (new DnsHeaderFlagList())->push(DnsHeaderFlag::AA),
            id: 'aa11bb22cc33',
            opCode: 'string',
            questionClass: 'string',
            questionName: 'string',
            questionRegisteredDomain: 'string',
            questionSubdomain: 'string',
            questionTopLevelDomain: 'string',
            questionType: 'string',
            resolvedIp: (new ValueList())->push('8.8.8.8'),
            responseCode: 'string',
            type: 'string',
        );

        $ecs = new Ecs(
            version: 'string',
        );

        $elf = new Elf(
            architecture: 'string',
            byteOrder: 'string',
            cpuType: 'string',
            creationDate: Carbon::parse('2000-01-01 01:11:11.000000'),
            exports: (new ValueList())->push('string'),
            goImportHash: 'string',
            goImports: (new ValueList())->push('string'),
            goImportsNamesEntropy: 1.23,
            goImportsNamesVarEntropy: 1.23,
            goStripped: true,
            headerAbiVersion: 'string',
            headerClass: 'string',
            headerData: 'string',
            headerEntrypoint: 123456,
            headerObjectVersion: 'string',
            headerOsAbi: 'string',
            importHash: 'string',
            imports: (new ValueList())->push('string'),
            importsNamesEntropy: 1.23,
            importsNamesVarEntropy: 1.23,
            sections: (new ElfSectionList())->push(new ElfSection(
                chi2: 123456,
                entropy: 123456,
                flags: 'string',
                name: 'string',
                physicalOffset: 123456,
                physicalSize: 123456,
                type: 'string',
                varEntropy: 123456,
                virtualAddress: 123456,
                virtualSize: 123456,
            )),
            segments: (new ElfSegmentList())->push(new ElfSegment(
                sections: 'string',
                type: 'string',
            )),
            sharedLibraries: (new ValueList())->push('string'),
            telfhash: 'string',
        );

        $email = new Email(
            attachments: (new EmailAttachmentList())->push(new EmailAttachment(
                fileExtension: 'string',
                fileMemeType: 'string',
                fileName: 123456,
                fileHash: new Hash(
                    md5: 'aa11bb22cc33',
                    sha1: '11aa22bb33cc',
                    sha256: 'aa11bb22cc33dd44ee55',
                    sha512: 'string',
                    ssdeep: 'string',
                    tlsh: 'string',
                ),
            )),
            bccAddress: 'info@example.test',
            ccAddress: 'info@example.test',
            contentType: 'string',
            deliveryTimestamp: Carbon::parse('2000-01-01 01:11:11.000000'),
            direction: 'string',
            fromAddress: (new ValueList())->push('info@example.test'),
            localId: 'string',
            messageId: 'string',
            originationTimestamp: Carbon::parse('2000-01-01 01:11:11.000000'),
            replyToAddress: (new ValueList())->push('info@example.test'),
            senderAddress: 'info@example.test',
            subject: 'string',
            toAddress: (new ValueList())->push('info@example.test'),
            xMailer: 'string',
        );

        $error = new Error(
            code: 'string',
            id: 'string',
            message: 'string',
            stackTrace: 'string',
            type: 'string',
        );

        $event = new Event(
            action: 'string',
            status: AgentIdStatus::VERIFIED,
            category: EventCategory::FILE,
            code: 'string',
            created: Carbon::parse('2000-01-01 01:11:11.000000'),
            dataset: 'string',
            duration: 123456,
            end: Carbon::parse('2000-01-01 01:11:11.000000'),
            hash: 'string',
            id: 'string',
            ingested: Carbon::parse('2000-01-01 01:11:11.000000'),
            kind: EventKind::ALERT,
            module: 'string',
            original: 'string',
            outcome: EventOutcome::FAILURE,
            provider: 'string',
            reason: 'string',
            reference: 'string',
            riskScore: 1.23,
            riskScoreNorm: new Percent(55),
            sequence: 123456,
            severity: 123456,
            start: Carbon::parse('2000-01-01 01:11:11.000000'),
            timezone: CarbonTimeZone::create('Asia/Tehran'),
            type: EventType::ACCESS,
            url: 'example.test',
        );

        $faas = new Faas(
            coldstart: true,
            execution: 'string',
            id: 'string',
            name: 'string',
            triggerRequestId: 'string',
            triggerType: FaasTriggerType::HTTP,
            version: 'string',
        );

        $file = new File(
            accessed: Carbon::parse('2000-01-01 01:11:11.000000'),
            attributes: (new FileAttributeList())->push(FileAttribute::ARCHIVE),
            created: Carbon::parse('2000-01-01 01:11:11.000000'),
            ctime: Carbon::parse('2000-01-01 01:11:11.000000'),
            device: 'string',
            driveLetter: 'string',
            extension: 'string',
            forkName: 'string',
            gid: 'string',
            group: 'string',
            inode: 'string',
            mimeType: 'string',
            mode: 'string',
            mtime: Carbon::parse('2000-01-01 01:11:11.000000'),
            name: 'string',
            owner: 'string',
            path: 'string',
            size: 123456,
            targetPath: 'string',
            type: 'string',
            uid: 'string',
            codeSignature: new CodeSignature(
                digestAlgorithm: 'string',
                exists: true,
                signingId: 'string',
                status: 'string',
                subjectName: 'string',
                teamId: 'string',
                timestamp: Carbon::parse('2000-01-01 01:11:11.000000'),
                trusted: true,
                valid: true,
            ),
            elf: new Elf(
                architecture: 'string',
                byteOrder: 'string',
                cpuType: 'string',
                creationDate: Carbon::parse('2000-01-01 01:11:11.000000'),
                exports: (new ValueList())->push('string'),
                goImportHash: 'string',
                goImports: (new ValueList())->push('string'),
                goImportsNamesEntropy: 1.23,
                goImportsNamesVarEntropy: 1.23,
                goStripped: true,
                headerAbiVersion: 'string',
                headerClass: 'string',
                headerData: 'string',
                headerEntrypoint: 123456,
                headerObjectVersion: 'string',
                headerOsAbi: 'string',
                importHash: 'string',
                imports: (new ValueList())->push('string'),
                importsNamesEntropy: 1.23,
                importsNamesVarEntropy: 1.23,
                sections: (new ElfSectionList())->push(new ElfSection(
                    chi2: 123456,
                    entropy: 123456,
                    flags: 'string',
                    name: 'string',
                    physicalOffset: 123456,
                    physicalSize: 123456,
                    type: 'string',
                    varEntropy: 123456,
                    virtualAddress: 123456,
                    virtualSize: 123456,
                )),
                segments: (new ElfSegmentList())->push(new ElfSegment(
                    sections: 'string',
                    type: 'string',
                )),
                sharedLibraries: (new ValueList())->push('string'),
                telfhash: 'string',
            ),
            hash: new Hash(
                md5: 'aa11bb22cc33',
                sha1: '11aa22bb33cc',
                sha256: 'aa11bb22cc33dd44ee55',
                sha512: 'string',
                ssdeep: 'string',
                tlsh: 'string',
            ),
            macho: new Macho(
                goImportHash: 'string',
                goImports: (new ValueList())->push('string'),
                goImportsNamesEntropy: 1.23,
                goImportsNamesVarEntropy: 1.23,
                goStripped: true,
                importHash: 'string',
                imports: (new ValueList())->push('string'),
                importsNamesEntropy: 1.23,
                importsNamesVarEntropy: 1.23,
                sections: (new MachoSectionList())->push(new MachoSection(
                    entropy: 123456,
                    name: 'string',
                    physicalSize: 123456,
                    varEntropy: 123456,
                    virtualSize: 123456,
                )),
                symhash: 'string',
            ),
            pe: new Pe(
                architecture: 'string',
                company: 'string',
                description: 'string',
                fileVersion: 'string',
                goImportHash: 'string',
                goImports: (new ValueList())->push('string'),
                goImportsNamesEntropy: 1.23,
                goImportsNamesVarEntropy: 1.23,
                goStripped: true,
                imphash: 'string',
                imports: (new ValueList())->push('string'),
                importsNamesEntropy: 1.23,
                importsNamesVarEntropy: 1.23,
                originalFileName: 'string',
                pehash: 'string',
                product: 'string',
                sections: (new PeSectionList())->push(new PeSection(
                    entropy: 1.23,
                    name: 'string',
                    physicalSize: 123456,
                    varEntropy: 1.23,
                    virtualSize: 123456,
                )),
            ),
            x509: new X509(
                alternativeName: 'string',
                issuerCommonName: 'string',
                issuerCountry: 'Iran',
                issuerDistinguishedName: 'string',
                issuerLocality: 'string',
                issuerOrganization: 'string',
                issuerOrganizationalUnit: 'string',
                issuerStateOrProvince: 'string',
                notAfter: Carbon::parse('2000-01-01 01:11:11.000000'),
                notBefore: Carbon::parse('2000-01-01 01:11:11.000000'),
                publicKeyAlgorithm: 'string',
                publicKeyCurve: 'string',
                publicKeyExponent: 123456,
                publicKeySize: 123456,
                serialNumber: 'string',
                signatureAlgorithm: 'string',
                subjectCommonName: 'string',
                subjectCountry: 'Iran',
                subjectDistinguishedName: 'string',
                subjectLocality: 'string',
                subjectOrganization: 'string',
                subjectOrganizationalUnit: 'string',
                subjectStateOrProvince: 'string',
                versionNumber: 123456,
            ),
        );

        $group = new Group(
            domain: 'string',
            id: 'string',
            name: 'string',
        );

        $host = new Host(
            architecture: 'string',
            bootId: 'string',
            cpuUsage: new Percent(55.5),
            diskReadBytes: 123456,
            diskWriteBytes: 123456,
            domain: 'string',
            hostname: 'string',
            id: 'string',
            ip: '8.8.8.8',
            mac: (new ValueList())->push('string'),
            name: 'string',
            networkEgressBytes: 123456,
            networkEgressPackets: 123456,
            networkIngressBytes: 123456,
            networkIngressPackets: 123456,
            pidNsIno: 123456,
            type: 'string',
            uptime: 123456,
            geo: new Geo(
                cityName: 'Tehran',
                continentCode: 'string',
                continentName: 'string',
                countryIsoCode: 'ir',
                countryName: 'Iran',
                location: new GeoPoint(
                    lat: '12345678.90',
                    lon: '98765432.10',
                ),
                name: 'string',
                postalCode: '1010 AA',
                regionIsoCode: 'ir',
                regionName: 'Iran',
                timezone: CarbonTimeZone::create('Asia/Tehran'),
            ),
            os: new Os(
                family: 'string',
                full: 'string',
                kernel: 'string',
                name: 'string',
                platform: 'string',
                type: OsType::LINUX,
                version: 'string',
            ),
            risk: new Risk(
                calculatedLevel: 123456,
                calculatedScore: 1.23,
                calculatedScoreNorm: new Percent(
                    value: 55.5,
                ),
                staticLevel: 123456,
                staticScore: 1.23,
                staticScoreNorm: new Percent(
                    value: 55.5,
                ),
            ),
        );

        $http = new Http(
            requestBodyBytes: 123456,
            requestBodyContent: 'string',
            requestBytes: 123456,
            requestId: 'string',
            requestMethod: HttpMethod::GET,
            requestMemeType: 'string',
            requestReferer: 'string',
            responseBodyBytes: 123456,
            responseBodyContent: 'string',
            responseBytes: 123456,
            responseMemeType: 'string',
            responseStatusCode: 123456,
            version: 'string',
        );

        $log = new Log(
            filePath: '/file/path/',
            level: 'string',
            logger: 'string',
            originFileLine: 123456,
            originFileName: 'string',
            originFunction: 'string',
            syslogFacilityCode: 123456,
            syslogFacilityName: 'string',
            syslogPriority: 123456,
            syslogSeverityCode: 123456,
            syslogSeverityName: 'string',
        );

        $network = new Network(
            application: 'string',
            bytes: 123456,
            communityId: 'string',
            direction: NetworkDirection::INBOUND,
            forwardedIp: '8.8.8.8',
            ianaNumber: 123456,
            innerVlan: new Vlan(
                id: 123456,
                name: 'string',
            ),
            vlan: new Vlan(
                id: 123456,
                name: 'string',
            ),
            name: 'string',
            packets: 123456,
            protocol: 'string',
            transport: 'string',
            type: 'string',
        );

        $observer = new Observer(
            egressZone: 'string',
            egressInterface: new InterfaceField(
                alias: 'string',
                id: 'string',
                name: 'string',
            ),
            egressVlan: new Vlan(
                id: 123456,
                name: 'string',
            ),
            hostname: 'string',
            ingressZone: 'string',
            ingressInterface: new InterfaceField(
                alias: 'string',
                id: 'string',
                name: 'string',
            ),
            ingressVlan: new Vlan(
                id: 123456,
                name: 'string',
            ),
            ip: '8.8.8.8',
            mac: (new ValueList())->push('string'),
            name: 'string',
            product: 'string',
            serialNumber: 'string',
            type: 'string',
            vendor: 'string',
            version: 'string',
            geo: new Geo(
                cityName: 'Tehran',
                continentCode: 'string',
                continentName: 'string',
                countryIsoCode: 'ir',
                countryName: 'Iran',
                location: new GeoPoint(
                    lat: '12345678.90',
                    lon: '98765432.10',
                ),
                name: 'string',
                postalCode: '1010 AA',
                regionIsoCode: 'ir',
                regionName: 'Iran',
                timezone: CarbonTimeZone::create('Asia/Tehran'),
            ),
            os: new Os(
                family: 'string',
                full: 'string',
                kernel: 'string',
                name: 'string',
                platform: 'string',
                type: OsType::MACOS,
                version: 'string',
            ),
        );

        $orchestrator = new Orchestrator(
            apiVersion: 'string',
            clusterId: 'string',
            clusterName: 'string',
            clusterUrl: 'example.test',
            clusterVersion: 'string',
            namespace: 'string',
            organization: 'string',
            resourceId: 'string',
            resourceIp: '8.8.8.8',
            resourceName: 'string',
            resourceParentType: 'string',
            resourceType: 'string',
            type: 'string',
        );

        $organization = new Organization(
            id: 'string',
            name: 'string',
        );

        $package = new Package(
            architecture: 'string',
            buildVersion: 'string',
            checksum: 'string',
            description: 'string',
            installScope: 'string',
            installed: Carbon::parse('2000-01-01 01:11:11.000000'),
            license: 'string',
            name: 'string',
            path: '/file/path/',
            size: 123456,
            type: 'string',
            version: 'string',
        );

        $process = new Process(
            args: (new ValueList())->push('string'),
            argsCount: 123456,
            commandLine: 'string',
            end: Carbon::parse('2000-01-01 01:11:11.000000'),
            entityId: 'string',
            entryMetaType: 'string',
            envVars: (new ValueList())->push('string'),
            executable: 'string',
            exitCode: 123456,
            interactive: true,
            ioBytesSkippedLength: 123456,
            ioBytesSkippedOffset: 123456,
            ioMaxBytesPerProcessExceeded: true,
            ioText: 'string',
            ioTotalBytesCaptured: 123456,
            ioTotalBytesSkipped: 123456,
            ioType: 'string',
            name: 'string',
            pgid: 123456,
            pid: 123456,
            sameAsProcess: true,
            start: Carbon::parse('2000-01-01 01:11:11.000000'),
            threadId: 123456,
            threadName: 'string',
            title: 'string',
            ttyCharDeviceMajor: 123456,
            ttyCharDeviceMinor: 123456,
            ttyColumns: 123456,
            ttyRows: 123456,
            uptime: 123456,
            workingDirectory: 'string',
            attestedGroups: (new GroupList())->push(new Group(
                domain: 'string',
                id: 'string',
                name: 'string',
            )),
            attestedUser: new User(
                domain: 'string',
                email: 'info@example.test',
                fullName: 'string',
                hash: 'aa11bb22cc33',
                id: '123-abc',
                name: 'string',
                roles: (new ValueList())->push('string'),
            ),
            codeSignature: new CodeSignature(
                digestAlgorithm: 'string',
                exists: true,
                signingId: 'string',
                status: 'string',
                subjectName: 'string',
                teamId: 'string',
                timestamp: Carbon::parse('2000-01-01 01:11:11.000000'),
                trusted: true,
                valid: true,
            ),
            elf: new Elf(
                architecture: 'string',
                byteOrder: 'string',
                cpuType: 'string',
                creationDate: Carbon::parse('2000-01-01 01:11:11.000000'),
                exports: (new ValueList())->push('string'),
                goImportHash: 'string',
                goImports: (new ValueList())->push('string'),
                goImportsNamesEntropy: 1.23,
                goImportsNamesVarEntropy: 1.23,
                goStripped: true,
                headerAbiVersion: 'string',
                headerClass: 'string',
                headerData: 'string',
                headerEntrypoint: 123456,
                headerObjectVersion: 'string',
                headerOsAbi: 'string',
                importHash: 'string',
                imports: (new ValueList())->push('string'),
                importsNamesEntropy: 1.23,
                importsNamesVarEntropy: 1.23,
                sections: (new ElfSectionList())->push(new ElfSection(
                    chi2: 123456,
                    entropy: 123456,
                    flags: 'string',
                    name: 'string',
                    physicalOffset: 123456,
                    physicalSize: 123456,
                    type: 'string',
                    varEntropy: 123456,
                    virtualAddress: 123456,
                    virtualSize: 123456,
                )),
                segments: (new ElfSegmentList())->push(new ElfSegment(
                    sections: 'string',
                    type: 'string',
                )),
                sharedLibraries: (new ValueList())->push('string'),
                telfhash: 'string',
            ),
            entryLeader: new Process(
                args: (new ValueList())->push('string'),
                argsCount: 123456,
                commandLine: 'string',
                end: Carbon::parse('2000-01-01 01:11:11.000000'),
                entityId: 'string',
                entryMetaType: 'string',
                envVars: (new ValueList())->push('string'),
                executable: 'string',
                exitCode: 123456,
                interactive: true,
                ioBytesSkippedLength: 123456,
                ioBytesSkippedOffset: 123456,
                ioMaxBytesPerProcessExceeded: true,
                ioText: 'string',
                ioTotalBytesCaptured: 123456,
                ioTotalBytesSkipped: 123456,
                ioType: 'string',
                name: 'string',
                pgid: 123456,
                pid: 123456,
                sameAsProcess: true,
                start: Carbon::parse('2000-01-01 01:11:11.000000'),
                threadId: 123456,
                threadName: 'string',
                title: 'string',
                ttyCharDeviceMajor: 123456,
                ttyCharDeviceMinor: 123456,
                ttyColumns: 123456,
                ttyRows: 123456,
                uptime: 123456,
                workingDirectory: 'string',
            ),
            entryLeaderParent: new Process(
                args: (new ValueList())->push('string'),
                argsCount: 123456,
                commandLine: 'string',
                end: Carbon::parse('2000-01-01 01:11:11.000000'),
                entityId: 'string',
                entryMetaType: 'string',
                envVars: (new ValueList())->push('string'),
                executable: 'string',
                exitCode: 123456,
                interactive: true,
                ioBytesSkippedLength: 123456,
                ioBytesSkippedOffset: 123456,
                ioMaxBytesPerProcessExceeded: true,
                ioText: 'string',
                ioTotalBytesCaptured: 123456,
                ioTotalBytesSkipped: 123456,
                ioType: 'string',
                name: 'string',
                pgid: 123456,
                pid: 123456,
                sameAsProcess: true,
                start: Carbon::parse('2000-01-01 01:11:11.000000'),
                threadId: 123456,
                threadName: 'string',
                title: 'string',
                ttyCharDeviceMajor: 123456,
                ttyCharDeviceMinor: 123456,
                ttyColumns: 123456,
                ttyRows: 123456,
                uptime: 123456,
                workingDirectory: 'string',
            ),
            entryLeaderParentSessionLeader: new Process(
                args: (new ValueList())->push('string'),
                argsCount: 123456,
                commandLine: 'string',
                end: Carbon::parse('2000-01-01 01:11:11.000000'),
                entityId: 'string',
                entryMetaType: 'string',
                envVars: (new ValueList())->push('string'),
                executable: 'string',
                exitCode: 123456,
                interactive: true,
                ioBytesSkippedLength: 123456,
                ioBytesSkippedOffset: 123456,
                ioMaxBytesPerProcessExceeded: true,
                ioText: 'string',
                ioTotalBytesCaptured: 123456,
                ioTotalBytesSkipped: 123456,
                ioType: 'string',
                name: 'string',
                pgid: 123456,
                pid: 123456,
                sameAsProcess: true,
                start: Carbon::parse('2000-01-01 01:11:11.000000'),
                threadId: 123456,
                threadName: 'string',
                title: 'string',
                ttyCharDeviceMajor: 123456,
                ttyCharDeviceMinor: 123456,
                ttyColumns: 123456,
                ttyRows: 123456,
                uptime: 123456,
                workingDirectory: 'string',
            ),
            entryMetaSource: new Source(
                address: 'string',
                bytes: 123456,
                domain: 'string',
                ip: 'string',
                mac: 'string',
                natIp: '8.8.8.8',
                natPort: 123456,
                packets: 123456,
                port: 123456,
                registeredDomain: 'string',
                subdomain: 'string',
                topLevelDomain: 'example.test',
                as: new AutonomousSystem(
                    number: 123456,
                    organizationName: 'string',
                ),
                geo: new Geo(
                    cityName: 'Tehran',
                    continentCode: 'string',
                    continentName: 'string',
                    countryIsoCode: 'ir',
                    countryName: 'Iran',
                    location: new GeoPoint(
                        lat: '12345678.90',
                        lon: '98765432.10',
                    ),
                    name: 'string',
                    postalCode: '1010 AA',
                    regionIsoCode: 'ir',
                    regionName: 'Iran',
                    timezone: CarbonTimeZone::create('Asia/Tehran'),
                ),
                user: new User(
                    domain: 'string',
                    email: 'info@example.test',
                    fullName: 'string',
                    hash: 'aa11bb22cc33',
                    id: '123-abc',
                    name: 'string',
                    roles: (new ValueList())->push('string'),
                ),
            ),
            group: new Group(
                domain: 'string',
                id: '123-abc',
                name: 'string',
            ),
            groupLeader: new Process(
                args: (new ValueList())->push('string'),
                argsCount: 123456,
                commandLine: 'string',
                end: Carbon::parse('2000-01-01 01:11:11.000000'),
                entityId: 'string',
                entryMetaType: 'string',
                envVars: (new ValueList())->push('string'),
                executable: 'string',
                exitCode: 123456,
                interactive: true,
                ioBytesSkippedLength: 123456,
                ioBytesSkippedOffset: 123456,
                ioMaxBytesPerProcessExceeded: true,
                ioText: 'string',
                ioTotalBytesCaptured: 123456,
                ioTotalBytesSkipped: 123456,
                ioType: 'string',
                name: 'string',
                pgid: 123456,
                pid: 123456,
                sameAsProcess: true,
                start: Carbon::parse('2000-01-01 01:11:11.000000'),
                threadId: 123456,
                threadName: 'string',
                title: 'string',
                ttyCharDeviceMajor: 123456,
                ttyCharDeviceMinor: 123456,
                ttyColumns: 123456,
                ttyRows: 123456,
                uptime: 123456,
                workingDirectory: 'string',
            ),
            hash: new Hash(
                md5: 'aa11bb22cc33',
                sha1: '11aa22bb33cc',
                sha256: 'aa11bb22cc33dd44ee55',
                sha512: 'string',
                ssdeep: 'string',
                tlsh: 'string',
            ),
            macho: new Macho(
                goImportHash: 'string',
                goImports: (new ValueList())->push('string'),
                goImportsNamesEntropy: 1.23,
                goImportsNamesVarEntropy: 1.23,
                goStripped: true,
                importHash: 'string',
                imports: (new ValueList())->push('string'),
                importsNamesEntropy: 1.23,
                importsNamesVarEntropy: 1.23,
                sections: (new MachoSectionList())->push(new MachoSection(
                    entropy: 123456,
                    name: 'string',
                    physicalSize: 123456,
                    varEntropy: 123456,
                    virtualSize: 123456,
                )),
                symhash: 'string',
            ),
            parent: new Process(
                args: (new ValueList())->push('string'),
                argsCount: 123456,
                commandLine: 'string',
                end: Carbon::parse('2000-01-01 01:11:11.000000'),
                entityId: 'string',
                entryMetaType: 'string',
                envVars: (new ValueList())->push('string'),
                executable: 'string',
                exitCode: 123456,
                interactive: true,
                ioBytesSkippedLength: 123456,
                ioBytesSkippedOffset: 123456,
                ioMaxBytesPerProcessExceeded: true,
                ioText: 'string',
                ioTotalBytesCaptured: 123456,
                ioTotalBytesSkipped: 123456,
                ioType: 'string',
                name: 'string',
                pgid: 123456,
                pid: 123456,
                sameAsProcess: true,
                start: Carbon::parse('2000-01-01 01:11:11.000000'),
                threadId: 123456,
                threadName: 'string',
                title: 'string',
                ttyCharDeviceMajor: 123456,
                ttyCharDeviceMinor: 123456,
                ttyColumns: 123456,
                ttyRows: 123456,
                uptime: 123456,
                workingDirectory: 'string',
            ),
            parentGroupLeader: new Process(
                args: (new ValueList())->push('string'),
                argsCount: 123456,
                commandLine: 'string',
                end: Carbon::parse('2000-01-01 01:11:11.000000'),
                entityId: 'string',
                entryMetaType: 'string',
                envVars: (new ValueList())->push('string'),
                executable: 'string',
                exitCode: 123456,
                interactive: true,
                ioBytesSkippedLength: 123456,
                ioBytesSkippedOffset: 123456,
                ioMaxBytesPerProcessExceeded: true,
                ioText: 'string',
                ioTotalBytesCaptured: 123456,
                ioTotalBytesSkipped: 123456,
                ioType: 'string',
                name: 'string',
                pgid: 123456,
                pid: 123456,
                sameAsProcess: true,
                start: Carbon::parse('2000-01-01 01:11:11.000000'),
                threadId: 123456,
                threadName: 'string',
                title: 'string',
                ttyCharDeviceMajor: 123456,
                ttyCharDeviceMinor: 123456,
                ttyColumns: 123456,
                ttyRows: 123456,
                uptime: 123456,
                workingDirectory: 'string',
            ),
            pe: new Pe(
                architecture: 'string',
                company: 'string',
                description: 'string',
                fileVersion: 'string',
                goImportHash: 'string',
                goImports: (new ValueList())->push('string'),
                goImportsNamesEntropy: 1.23,
                goImportsNamesVarEntropy: 1.23,
                goStripped: true,
                imphash: 'string',
                imports: (new ValueList())->push('string'),
                importsNamesEntropy: 1.23,
                importsNamesVarEntropy: 1.23,
                originalFileName: 'string',
                pehash: 'string',
                product: 'string',
                sections: (new PeSectionList())->push(new PeSection(
                    entropy: 1.23,
                    name: 'string',
                    physicalSize: 123456,
                    varEntropy: 1.23,
                    virtualSize: 123456,
                )),
            ),
            previous: (new ProcessList())->push(new Process(
                args: (new ValueList())->push('string'),
                argsCount: 123456,
                commandLine: 'string',
                end: Carbon::parse('2000-01-01 01:11:11.000000'),
                entityId: 'string',
                entryMetaType: 'string',
                envVars: (new ValueList())->push('string'),
                executable: 'string',
                exitCode: 123456,
                interactive: true,
                ioBytesSkippedLength: 123456,
                ioBytesSkippedOffset: 123456,
                ioMaxBytesPerProcessExceeded: true,
                ioText: 'string',
                ioTotalBytesCaptured: 123456,
                ioTotalBytesSkipped: 123456,
                ioType: 'string',
                name: 'string',
                pgid: 123456,
                pid: 123456,
                sameAsProcess: true,
                start: Carbon::parse('2000-01-01 01:11:11.000000'),
                threadId: 123456,
                threadName: 'string',
                title: 'string',
                ttyCharDeviceMajor: 123456,
                ttyCharDeviceMinor: 123456,
                ttyColumns: 123456,
                ttyRows: 123456,
                uptime: 123456,
                workingDirectory: 'string',
            )),
            realGroup: new Group(
                domain: 'string',
                id: 'string',
                name: 'string',
            ),
            realUser: new User(
                domain: 'string',
                email: 'info@example.test',
                fullName: 'string',
                hash: 'aa11bb22cc33',
                id: '123-abc',
                name: 'string',
                roles: (new ValueList())->push('string'),
            ),
            savedGroup: new Group(
                domain: 'string',
                id: 'string',
                name: 'string',
            ),
            savedUser: new User(
                domain: 'string',
                email: 'info@example.test',
                fullName: 'string',
                hash: 'aa11bb22cc33',
                id: '123-abc',
                name: 'string',
                roles: (new ValueList())->push('string'),
            ),
            sessionLeader: new Process(
                args: (new ValueList())->push('string'),
                argsCount: 123456,
                commandLine: 'string',
                end: Carbon::parse('2000-01-01 01:11:11.000000'),
                entityId: 'string',
                entryMetaType: 'string',
                envVars: (new ValueList())->push('string'),
                executable: 'string',
                exitCode: 123456,
                interactive: true,
                ioBytesSkippedLength: 123456,
                ioBytesSkippedOffset: 123456,
                ioMaxBytesPerProcessExceeded: true,
                ioText: 'string',
                ioTotalBytesCaptured: 123456,
                ioTotalBytesSkipped: 123456,
                ioType: 'string',
                name: 'string',
                pgid: 123456,
                pid: 123456,
                sameAsProcess: true,
                start: Carbon::parse('2000-01-01 01:11:11.000000'),
                threadId: 123456,
                threadName: 'string',
                title: 'string',
                ttyCharDeviceMajor: 123456,
                ttyCharDeviceMinor: 123456,
                ttyColumns: 123456,
                ttyRows: 123456,
                uptime: 123456,
                workingDirectory: 'string',
            ),
            sessionLeaderParent: new Process(
                args: (new ValueList())->push('string'),
                argsCount: 123456,
                commandLine: 'string',
                end: Carbon::parse('2000-01-01 01:11:11.000000'),
                entityId: 'string',
                entryMetaType: 'string',
                envVars: (new ValueList())->push('string'),
                executable: 'string',
                exitCode: 123456,
                interactive: true,
                ioBytesSkippedLength: 123456,
                ioBytesSkippedOffset: 123456,
                ioMaxBytesPerProcessExceeded: true,
                ioText: 'string',
                ioTotalBytesCaptured: 123456,
                ioTotalBytesSkipped: 123456,
                ioType: 'string',
                name: 'string',
                pgid: 123456,
                pid: 123456,
                sameAsProcess: true,
                start: Carbon::parse('2000-01-01 01:11:11.000000'),
                threadId: 123456,
                threadName: 'string',
                title: 'string',
                ttyCharDeviceMajor: 123456,
                ttyCharDeviceMinor: 123456,
                ttyColumns: 123456,
                ttyRows: 123456,
                uptime: 123456,
                workingDirectory: 'string',
            ),
            sessionLeaderParentSessionLeader: new Process(
                args: (new ValueList())->push('string'),
                argsCount: 123456,
                commandLine: 'string',
                end: Carbon::parse('2000-01-01 01:11:11.000000'),
                entityId: 'string',
                entryMetaType: 'string',
                envVars: (new ValueList())->push('string'),
                executable: 'string',
                exitCode: 123456,
                interactive: true,
                ioBytesSkippedLength: 123456,
                ioBytesSkippedOffset: 123456,
                ioMaxBytesPerProcessExceeded: true,
                ioText: 'string',
                ioTotalBytesCaptured: 123456,
                ioTotalBytesSkipped: 123456,
                ioType: 'string',
                name: 'string',
                pgid: 123456,
                pid: 123456,
                sameAsProcess: true,
                start: Carbon::parse('2000-01-01 01:11:11.000000'),
                threadId: 123456,
                threadName: 'string',
                title: 'string',
                ttyCharDeviceMajor: 123456,
                ttyCharDeviceMinor: 123456,
                ttyColumns: 123456,
                ttyRows: 123456,
                uptime: 123456,
                workingDirectory: 'string',
            ),
            supplementalGroups: (new GroupList())->push(new Group(
                id: 123456,
                name: 'string',
            )),
            user: new User(
                domain: 'string',
                email: 'info@example.test',
                fullName: 'string',
                hash: 'aa11bb22cc33',
                id: '123-abc',
                name: 'string',
                roles: (new ValueList())->push('string'),
            ),
        );

        $registry = new Registry(
            dataBytes: 123456,
            dataStrings: (new ValueList())->push('string'),
            dataType: 'string',
            hive: 'string',
            key: 'string',
            path: '/file/path/',
            value: 'string',
        );

        $related = new Related(
            hash: (new ValueList())->push('aa11bb22cc33'),
            hosts: (new ValueList())->push('string'),
            ip: (new ValueList())->push('8.8.8.8'),
            user: (new ValueList())->push('string'),
        );

        $rule = new Rule(
            author: (new ValueList())->push('string'),
            category: 'string',
            description: 'string',
            id: '123-abc',
            license: 'string',
            name: 'string',
            reference: 'string',
            ruleset: 'string',
            uuid: '123-abc',
            version: 'string',
        );

        $server = new Server(
            address: '8.8.8.8',
            bytes: 123456,
            domain: 'string',
            ip: '8.8.8.8',
            mac: 'string',
            natIp: '8.8.8.8',
            natPort: 80,
            packets: 80,
            port: 80,
            registeredDomain: 'string',
            subdomain: 'string',
            topLevelDomain: 'string',
            as: new AutonomousSystem(
                number: 123456,
                organizationName: 'string',
            ),
            geo: new Geo(
                cityName: 'Tehran',
                continentCode: 'string',
                continentName: 'string',
                countryIsoCode: 'ir',
                countryName: 'Iran',
                location: new GeoPoint(
                    lat: '12345678.90',
                    lon: '98765432.10',
                ),
                name: 'string',
                postalCode: '1010 AA',
                regionIsoCode: 'ir',
                regionName: 'Iran',
                timezone: CarbonTimeZone::create('Asia/Tehran'),
            ),
            user: new User(
                domain: 'string',
                email: 'info@example.test',
                fullName: 'string',
                hash: 'aa11bb22cc33',
                id: '123-abc',
                name: 'string',
                roles: (new ValueList())->push('string'),
            ),
        );

        $service = new Service(
            address: '8.8.8.8',
            environment: 'string',
            ephemeralId: '123-abc',
            id: '123-abc',
            name: 'string',
            nodeName: 'string',
            nodeRole: 'string',
            nodeRoles: (new ValueList())->push('string'),
            state: 'string',
            type: 'string',
            version: 'string',
            origin: new Service(
                address: '8.8.8.8',
                environment: 'string',
                ephemeralId: '123-abc',
                id: '123-abc',
                name: 'string',
                nodeName: 'string',
                nodeRole: 'string',
                nodeRoles: (new ValueList())->push('string'),
                state: 'string',
                type: 'string',
                version: 'string',
            ),
            target: new Service(
                address: '8.8.8.8',
                environment: 'string',
                ephemeralId: '123-abc',
                id: '123-abc',
                name: 'string',
                nodeName: 'string',
                nodeRole: 'string',
                nodeRoles: (new ValueList())->push('string'),
                state: 'string',
                type: 'string',
                version: 'string',
            ),
        );

        $source = new Source(
            address: 'string',
            bytes: 123456,
            domain: 'string',
            ip: 'string',
            mac: 'string',
            natIp: '8.8.8.8',
            natPort: 123456,
            packets: 123456,
            port: 123456,
            registeredDomain: 'string',
            subdomain: 'string',
            topLevelDomain: 'example.test',
            as: new AutonomousSystem(
                number: 123456,
                organizationName: 'string',
            ),
            geo: new Geo(
                cityName: 'Tehran',
                continentCode: 'string',
                continentName: 'string',
                countryIsoCode: 'ir',
                countryName: 'Iran',
                location: new GeoPoint(
                    lat: '12345678.90',
                    lon: '98765432.10',
                ),
                name: 'string',
                postalCode: '1010 AA',
                regionIsoCode: 'ir',
                regionName: 'Iran',
                timezone: CarbonTimeZone::create('Asia/Tehran'),
            ),
            user: new User(
                domain: 'string',
                email: 'info@example.test',
                fullName: 'string',
                hash: 'aa11bb22cc33',
                id: '123-abc',
                name: 'string',
                roles: (new ValueList())->push('string'),
            ),
        );

        $threat = new Threat(
            enrichments: (new ThreatEnrichmentList())->push(new ThreatEnrichment(
                    indicatorConfidence: ThreatConfidence::NOT_SPECIFIED,
                    indicatorDescription: 'this is string',
                    indicatorEmailAddress: 'info@example.test',
                    indicatorFirstSeen: Carbon::parse('2000-01-01 01:11:11.000000'),
                    indicatorIp: '8.8.8.8',
                    indicatorLastSeen: Carbon::parse('2000-01-01 01:11:11.000000'),
                    indicatorMarkingTlp: ThreatMarkingTlp::WHITE,
                    indicatorMarkingTlpVersion: 'string',
                    indicatorMarkingModifiedAt: Carbon::parse('2000-01-01 01:11:11.000000'),
                    indicatorName: 'string',
                    indicatorPort: 123456,
                    indicatorProvider: 'string',
                    indicatorReference: 'string',
                    indicatorScannerStats: 123456,
                    indicatorSightings: 123456,
                    indicatorType: ThreatIndicatorType::FILE,
                    matchedAtomic: 'string',
                    matchedField: 'string',
                    matchedId: 'string',
                    matchedOccurred: Carbon::parse('2000-01-01 01:11:11.000000'),
                    matchedType: 'string',
                    indicatorAs: new AutonomousSystem(
                        number: 123456,
                        organizationName: 'string',
                    ),
                    indicatorFile: new File(
                        accessed: Carbon::parse('2000-01-01 01:11:11.000000'),
                        attributes: (new FileAttributeList())->push(FileAttribute::ARCHIVE),
                        created: Carbon::parse('2000-01-01 01:11:11.000000'),
                        ctime: Carbon::parse('2000-01-01 01:11:11.000000'),
                        device: 'string',
                        driveLetter: 'string',
                        extension: 'string',
                        forkName: 'string',
                        gid: 'string',
                        group: 'string',
                        inode: 'string',
                        mimeType: 'string',
                        mode: 'string',
                        mtime: Carbon::parse('2000-01-01 01:11:11.000000'),
                        name: 'string',
                        owner: 'string',
                        path: 'string',
                        size: 123456,
                        targetPath: 'string',
                        type: 'string',
                        uid: 'string',
                        codeSignature: new CodeSignature(
                            digestAlgorithm: 'string',
                            exists: true,
                            signingId: 'string',
                            status: 'string',
                            subjectName: 'string',
                            teamId: 'string',
                            timestamp: Carbon::parse('2000-01-01 01:11:11.000000'),
                            trusted: true,
                            valid: true,
                        ),
                        elf: new Elf(
                            architecture: 'string',
                            byteOrder: 'string',
                            cpuType: 'string',
                            creationDate: Carbon::parse('2000-01-01 01:11:11.000000'),
                            exports: (new ValueList())->push('string'),
                            goImportHash: 'string',
                            goImports: (new ValueList())->push('string'),
                            goImportsNamesEntropy: 1.23,
                            goImportsNamesVarEntropy: 1.23,
                            goStripped: true,
                            headerAbiVersion: 'string',
                            headerClass: 'string',
                            headerData: 'string',
                            headerEntrypoint: 123456,
                            headerObjectVersion: 'string',
                            headerOsAbi: 'string',
                            importHash: 'string',
                            imports: (new ValueList())->push('string'),
                            importsNamesEntropy: 1.23,
                            importsNamesVarEntropy: 1.23,
                            sections: (new ElfSectionList())->push(new ElfSection(
                                chi2: 123456,
                                entropy: 123456,
                                flags: 'string',
                                name: 'string',
                                physicalOffset: 123456,
                                physicalSize: 123456,
                                type: 'string',
                                varEntropy: 123456,
                                virtualAddress: 123456,
                                virtualSize: 123456,
                            )),
                            segments: (new ElfSegmentList())->push(new ElfSegment(
                                sections: 'string',
                                type: 'string',
                            )),
                            sharedLibraries: (new ValueList())->push('string'),
                            telfhash: 'string',
                        ),
                        hash: new Hash(
                            md5: 'aa11bb22cc33',
                            sha1: '11aa22bb33cc',
                            sha256: 'aa11bb22cc33dd44ee55',
                            sha512: 'string',
                            ssdeep: 'string',
                            tlsh: 'string',
                        ),
                        macho: new Macho(
                            goImportHash: 'string',
                            goImports: (new ValueList())->push('string'),
                            goImportsNamesEntropy: 1.23,
                            goImportsNamesVarEntropy: 1.23,
                            goStripped: true,
                            importHash: 'string',
                            imports: (new ValueList())->push('string'),
                            importsNamesEntropy: 1.23,
                            importsNamesVarEntropy: 1.23,
                            sections: (new MachoSectionList())->push(new MachoSection(
                                entropy: 123456,
                                name: 'string',
                                physicalSize: 123456,
                                varEntropy: 123456,
                                virtualSize: 123456,
                            )),
                            symhash: 'string',
                        ),
                        pe: new Pe(
                            architecture: 'string',
                            company: 'string',
                            description: 'string',
                            fileVersion: 'string',
                            goImportHash: 'string',
                            goImports: (new ValueList())->push('string'),
                            goImportsNamesEntropy: 1.23,
                            goImportsNamesVarEntropy: 1.23,
                            goStripped: true,
                            imphash: 'string',
                            imports: (new ValueList())->push('string'),
                            importsNamesEntropy: 1.23,
                            importsNamesVarEntropy: 1.23,
                            originalFileName: 'string',
                            pehash: 'string',
                            product: 'string',
                            sections: (new PeSectionList())->push(new PeSection(
                                entropy: 1.23,
                                name: 'string',
                                physicalSize: 123456,
                                varEntropy: 1.23,
                                virtualSize: 123456,
                            )),
                        ),
                        x509: new X509(
                            alternativeName: 'string',
                            issuerCommonName: 'string',
                            issuerCountry: 'Iran',
                            issuerDistinguishedName: 'string',
                            issuerLocality: 'string',
                            issuerOrganization: 'string',
                            issuerOrganizationalUnit: 'string',
                            issuerStateOrProvince: 'string',
                            notAfter: Carbon::parse('2000-01-01 01:11:11.000000'),
                            notBefore: Carbon::parse('2000-01-01 01:11:11.000000'),
                            publicKeyAlgorithm: 'string',
                            publicKeyCurve: 'string',
                            publicKeyExponent: 123456,
                            publicKeySize: 123456,
                            serialNumber: 'string',
                            signatureAlgorithm: 'string',
                            subjectCommonName: 'string',
                            subjectCountry: 'Iran',
                            subjectDistinguishedName: 'string',
                            subjectLocality: 'string',
                            subjectOrganization: 'string',
                            subjectOrganizationalUnit: 'string',
                            subjectStateOrProvince: 'string',
                            versionNumber: 123456,
                        ),
                    ),
                    indicatorGeo: new Geo(
                        cityName: 'Tehran',
                        continentCode: 'string',
                        continentName: 'string',
                        countryIsoCode: 'ir',
                        countryName: 'Iran',
                        location: new GeoPoint(
                            lat: '12345678.90',
                            lon: '98765432.10',
                        ),
                        name: 'string',
                        postalCode: '1010 AA',
                        regionIsoCode: 'ir',
                        regionName: 'Iran',
                        timezone: CarbonTimeZone::create('Asia/Tehran'),
                    ),
                    indicatorRegistry: new Registry(
                        dataBytes: 'string',
                        dataStrings: (new ValueList())->push('string'),
                        dataType: 'string',
                        hive: 'string',
                        key: 'string',
                        path: 'string',
                        value: 'string',
                    ),
                    indicatorUrl: new Url(
                        domain: 'string',
                        extension: '.tst',
                        fragment: 'string',
                        full: 'example.test',
                        original: 'example.test',
                        password: 'string',
                        path: 'string',
                        port: 123456,
                        query: 'string',
                        registeredDomain: 'string',
                        scheme: 'string',
                        subdomain: 'string',
                        topLevelDomain: 'string',
                        username: 'string',
                    ),
                    indicatorX509: new X509(
                        alternativeName: 'string',
                        issuerCommonName: 'string',
                        issuerCountry: 'Iran',
                        issuerDistinguishedName: 'string',
                        issuerLocality: 'string',
                        issuerOrganization: 'string',
                        issuerOrganizationalUnit: 'string',
                        issuerStateOrProvince: 'string',
                        notAfter: Carbon::parse('2000-01-01 01:11:11.000000'),
                        notBefore: Carbon::parse('2000-01-01 01:11:11.000000'),
                        publicKeyAlgorithm: 'string',
                        publicKeyCurve: 'string',
                        publicKeyExponent: 123456,
                        publicKeySize: 123456,
                        serialNumber: 'string',
                        signatureAlgorithm: 'string',
                        subjectCommonName: 'string',
                        subjectCountry: 'Iran',
                        subjectDistinguishedName: 'string',
                        subjectLocality: 'string',
                        subjectOrganization: 'string',
                        subjectOrganizationalUnit: 'string',
                        subjectStateOrProvince: 'string',
                        versionNumber: 123456,
                    ),
                )
            ),
            feedDashboardId: 'string',
            feedDescription: 'this is string',
            feedName: 'string',
            feedReference: 'string',
            framework: 'string',
            groupAlias: (new ValueList())->push('string'),
            groupId: 'string',
            groupName: 'string',
            groupReference: 'string',
            indicatorConfidence: ThreatConfidence::NOT_SPECIFIED,
            indicatorDescription: 'this is string',
            indicatorEmailAddress: 'info@example.test',
            indicatorFirstSeen: Carbon::parse('2000-01-01 01:11:11.000000'),
            indicatorIp: '8.8.8.8',
            indicatorLastSeen: Carbon::parse('2000-01-01 01:11:11.000000'),
            indicatorMarkingTlp: ThreatMarkingTLP::WHITE,
            indicatorMarkingTlpVersion: 'string',
            indicatorMarkingModifiedAt: Carbon::parse('2000-01-01 01:11:11.000000'),
            indicatorName: 'string',
            indicatorPort: 123456,
            indicatorProvider: 'string',
            indicatorReference: 'string',
            indicatorScannerStats: 123456,
            indicatorSightings: 123456,
            indicatorType: ThreatIndicatorType::ARTIFACT,
            softwareAlias: (new ValueList())->push('string'),
            softwareId: 'string',
            softwareName: 'string',
            softwarePlatform: (new SoftwarePlatformList())->push(SoftwarePlatform::LINUX),
            softwareReference: 'string',
            softwareType: SoftwareType::MALWARE,
            tacticId: 'string',
            tacticName: 'string',
            tacticReference: 'string',
            techniqueId: (new ValueList())->push('string'),
            techniqueName: (new ValueList())->push('string'),
            techniqueReference: (new ValueList())->push('string'),
            techniqueSubtechniqueId: (new ValueList())->push('string'),
            techniqueSubtechniqueName: (new ValueList())->push('string'),
            techniqueSubtechniqueReference: (new ValueList())->push('string'),
            indicatorAs: new AutonomousSystem(
                number: 123456,
                organizationName: 'string',
            ),
            indicatorFile: new File(
                accessed: Carbon::parse('2000-01-01 01:11:11.000000'),
                attributes: (new FileAttributeList())->push(FileAttribute::ARCHIVE),
                created: Carbon::parse('2000-01-01 01:11:11.000000'),
                ctime: Carbon::parse('2000-01-01 01:11:11.000000'),
                device: 'string',
                driveLetter: 'string',
                extension: 'string',
                forkName: 'string',
                gid: 'string',
                group: 'string',
                inode: 'string',
                mimeType: 'string',
                mode: 'string',
                mtime: Carbon::parse('2000-01-01 01:11:11.000000'),
                name: 'string',
                owner: 'string',
                path: 'string',
                size: 123456,
                targetPath: 'string',
                type: 'string',
                uid: 'string',
                codeSignature: new CodeSignature(
                    digestAlgorithm: 'string',
                    exists: true,
                    signingId: 'string',
                    status: 'string',
                    subjectName: 'string',
                    teamId: 'string',
                    timestamp: Carbon::parse('2000-01-01 01:11:11.000000'),
                    trusted: true,
                    valid: true,
                ),
                elf: new Elf(
                    architecture: 'string',
                    byteOrder: 'string',
                    cpuType: 'string',
                    creationDate: Carbon::parse('2000-01-01 01:11:11.000000'),
                    exports: (new ValueList())->push('string'),
                    goImportHash: 'string',
                    goImports: (new ValueList())->push('string'),
                    goImportsNamesEntropy: 1.23,
                    goImportsNamesVarEntropy: 1.23,
                    goStripped: true,
                    headerAbiVersion: 'string',
                    headerClass: 'string',
                    headerData: 'string',
                    headerEntrypoint: 123456,
                    headerObjectVersion: 'string',
                    headerOsAbi: 'string',
                    importHash: 'string',
                    imports: (new ValueList())->push('string'),
                    importsNamesEntropy: 1.23,
                    importsNamesVarEntropy: 1.23,
                    sections: (new ElfSectionList())->push(new ElfSection(
                        chi2: 123456,
                        entropy: 123456,
                        flags: 'string',
                        name: 'string',
                        physicalOffset: 123456,
                        physicalSize: 123456,
                        type: 'string',
                        varEntropy: 123456,
                        virtualAddress: 123456,
                        virtualSize: 123456,
                    )),
                    segments: (new ElfSegmentList())->push(new ElfSegment(
                        sections: 'string',
                        type: 'string',
                    )),
                    sharedLibraries: (new ValueList())->push('string'),
                    telfhash: 'string',
                ),
                hash: new Hash(
                    md5: 'aa11bb22cc33',
                    sha1: '11aa22bb33cc',
                    sha256: 'aa11bb22cc33dd44ee55',
                    sha512: 'string',
                    ssdeep: 'string',
                    tlsh: 'string',
                ),
                macho: new Macho(
                    goImportHash: 'string',
                    goImports: (new ValueList())->push('string'),
                    goImportsNamesEntropy: 1.23,
                    goImportsNamesVarEntropy: 1.23,
                    goStripped: true,
                    importHash: 'string',
                    imports: (new ValueList())->push('string'),
                    importsNamesEntropy: 1.23,
                    importsNamesVarEntropy: 1.23,
                    sections: (new MachoSectionList())->push(new MachoSection(
                        entropy: 123456,
                        name: 'string',
                        physicalSize: 123456,
                        varEntropy: 123456,
                        virtualSize: 123456,
                    )),
                    symhash: 'string',
                ),
                pe: new Pe(
                    architecture: 'string',
                    company: 'string',
                    description: 'string',
                    fileVersion: 'string',
                    goImportHash: 'string',
                    goImports: (new ValueList())->push('string'),
                    goImportsNamesEntropy: 1.23,
                    goImportsNamesVarEntropy: 1.23,
                    goStripped: true,
                    imphash: 'string',
                    imports: (new ValueList())->push('string'),
                    importsNamesEntropy: 1.23,
                    importsNamesVarEntropy: 1.23,
                    originalFileName: 'string',
                    pehash: 'string',
                    product: 'string',
                    sections: (new PeSectionList())->push(new PeSection(
                        entropy: 1.23,
                        name: 'string',
                        physicalSize: 123456,
                        varEntropy: 1.23,
                        virtualSize: 123456,
                    )),
                ),
                x509: new X509(
                    alternativeName: 'string',
                    issuerCommonName: 'string',
                    issuerCountry: 'Iran',
                    issuerDistinguishedName: 'string',
                    issuerLocality: 'string',
                    issuerOrganization: 'string',
                    issuerOrganizationalUnit: 'string',
                    issuerStateOrProvince: 'string',
                    notAfter: Carbon::parse('2000-01-01 01:11:11.000000'),
                    notBefore: Carbon::parse('2000-01-01 01:11:11.000000'),
                    publicKeyAlgorithm: 'string',
                    publicKeyCurve: 'string',
                    publicKeyExponent: 123456,
                    publicKeySize: 123456,
                    serialNumber: 'string',
                    signatureAlgorithm: 'string',
                    subjectCommonName: 'string',
                    subjectCountry: 'Iran',
                    subjectDistinguishedName: 'string',
                    subjectLocality: 'string',
                    subjectOrganization: 'string',
                    subjectOrganizationalUnit: 'string',
                    subjectStateOrProvince: 'string',
                    versionNumber: 123456,
                ),
            ),
            indicatorGeo: new Geo(
                cityName: 'Tehran',
                continentCode: 'string',
                continentName: 'string',
                countryIsoCode: 'ir',
                countryName: 'Iran',
                location: new GeoPoint(
                    lat: '12345678.90',
                    lon: '98765432.10',
                ),
                name: 'string',
                postalCode: '1010 AA',
                regionIsoCode: 'ir',
                regionName: 'Iran',
                timezone: CarbonTimeZone::create('Asia/Tehran'),
            ),
            indicatorRegistry: new Registry(
                dataBytes: 'string',
                dataStrings: (new ValueList())->push('string'),
                dataType: 'string',
                hive: 'string',
                key: 'string',
                path: 'string',
                value: 'string',
            ),
            indicatorUrl: new Url(
                domain: 'string',
                extension: '.tst',
                fragment: 'string',
                full: 'example.test',
                original: 'example.test',
                password: 'string',
                path: 'string',
                port: 123456,
                query: 'string',
                registeredDomain: 'string',
                scheme: 'string',
                subdomain: 'string',
                topLevelDomain: 'string',
                username: 'string',
            ),
            indicatorX509: new X509(
                alternativeName: 'string',
                issuerCommonName: 'string',
                issuerCountry: 'Iran',
                issuerDistinguishedName: 'string',
                issuerLocality: 'string',
                issuerOrganization: 'string',
                issuerOrganizationalUnit: 'string',
                issuerStateOrProvince: 'string',
                notAfter: Carbon::parse('2000-01-01 01:11:11.000000'),
                notBefore: Carbon::parse('2000-01-01 01:11:11.000000'),
                publicKeyAlgorithm: 'string',
                publicKeyCurve: 'string',
                publicKeyExponent: 123456,
                publicKeySize: 123456,
                serialNumber: 'string',
                signatureAlgorithm: 'string',
                subjectCommonName: 'string',
                subjectCountry: 'Iran',
                subjectDistinguishedName: 'string',
                subjectLocality: 'string',
                subjectOrganization: 'string',
                subjectOrganizationalUnit: 'string',
                subjectStateOrProvince: 'string',
                versionNumber: 123456,
            ),
        );

        $tls = new TLS(
            cipher: 'string',
            clientCertificate: 'string',
            clientCertificateChain: (new ValueList())->push('string'),
            clientHashMd5: 'aa11bb22cc33',
            clientHashSha1: '11aa22bb33cc',
            clientHashSha256: 'aa11bb22cc33dd44ee55',
            clientIssuer: 'string',
            clientJa3: 'string',
            clientNotAfter: Carbon::parse('2000-01-01 01:11:11.000000'),
            clientNotBefore: Carbon::parse('2000-01-01 01:11:11.000000'),
            clientServerName: 'string',
            clientSubject: 'string',
            clientSupportedCiphers: (new ValueList())->push('string'),
            curve: 'string',
            established: true,
            nextProtocol: 'string',
            resumed: true,
            serverCertificate: 'string',
            serverCertificateChain: (new ValueList())->push('string'),
            serverHashMd5: 'aa11bb22cc33',
            serverHashSha1: '11aa22bb33cc',
            serverHashSha256: 'aa11bb22cc33dd44ee55',
            serverIssuer: 'string',
            serverJa3s: 'string',
            serverNotAfter: Carbon::parse('2000-01-01 01:11:11.000000'),
            serverNotBefore: Carbon::parse('2000-01-01 01:11:11.000000'),
            serverSubject: 'string',
            version: 'string',
            versionProtocol: 'string',
            clientX509: new X509(
                alternativeName: 'string',
                issuerCommonName: 'string',
                issuerCountry: 'Iran',
                issuerDistinguishedName: 'string',
                issuerLocality: 'string',
                issuerOrganization: 'string',
                issuerOrganizationalUnit: 'string',
                issuerStateOrProvince: 'string',
                notAfter: Carbon::parse('2000-01-01 01:11:11.000000'),
                notBefore: Carbon::parse('2000-01-01 01:11:11.000000'),
                publicKeyAlgorithm: 'string',
                publicKeyCurve: 'string',
                publicKeyExponent: 123456,
                publicKeySize: 123456,
                serialNumber: 'string',
                signatureAlgorithm: 'string',
                subjectCommonName: 'string',
                subjectCountry: 'Iran',
                subjectDistinguishedName: 'string',
                subjectLocality: 'string',
                subjectOrganization: 'string',
                subjectOrganizationalUnit: 'string',
                subjectStateOrProvince: 'string',
                versionNumber: 123456,
            ),
            serverX509: new X509(
                alternativeName: 'string',
                issuerCommonName: 'string',
                issuerCountry: 'Iran',
                issuerDistinguishedName: 'string',
                issuerLocality: 'string',
                issuerOrganization: 'string',
                issuerOrganizationalUnit: 'string',
                issuerStateOrProvince: 'string',
                notAfter: Carbon::parse('2000-01-01 01:11:11.000000'),
                notBefore: Carbon::parse('2000-01-01 01:11:11.000000'),
                publicKeyAlgorithm: 'string',
                publicKeyCurve: 'string',
                publicKeyExponent: 123456,
                publicKeySize: 123456,
                serialNumber: 'string',
                signatureAlgorithm: 'string',
                subjectCommonName: 'string',
                subjectCountry: 'Iran',
                subjectDistinguishedName: 'string',
                subjectLocality: 'string',
                subjectOrganization: 'string',
                subjectOrganizationalUnit: 'string',
                subjectStateOrProvince: 'string',
                versionNumber: 123456,
            ),
        );

        $tracing = new Tracing(
            spanId: 'string',
            traceId: 'string',
            transactionId: 'string',
        );

        $url =  new Url(
            domain: 'string',
            extension: '.tst',
            fragment: 'string',
            full: 'example.test',
            original: 'example.test',
            password: 'string',
            path: 'string',
            port: 123456,
            query: 'string',
            registeredDomain: 'string',
            scheme: 'string',
            subdomain: 'string',
            topLevelDomain: 'string',
            username: 'string',
        );

        $user = new User(
            domain: 'string',
            email: 'info@example.test',
            fullName: 'string',
            hash: 'aa11bb22cc33',
            id: '123-abc',
            name: 'string',
            roles: (new ValueList())->push('string'),
        );

        $vulnerability = new Vulnerability(
            category: (new ValueList())->push('string'),
            classification: 'string',
            description: 'string',
            enumeration: 'string',
            id: '123-abc',
            reference: 'string',
            reportId: '123-abc',
            scannerVendor: 'string',
            scoreBase: new Score(5),
            scoreEnvironmental: new Score(5),
            scoreTemporal: new Score(5),
            scoreVersion: 'string',
            severity: 'string',
        );

        $collection = new EcsFieldsCollection([
            $agent,
            $base,
            $client,
            $cloud,
            $container,
            $dataStream,
            $destination,
            $device,
            $dll,
            $dns,
            $ecs,
            $elf,
            $email,
            $error,
            $event,
            $faas,
            $file,
            $group,
            $host,
            $http,
            $log,
            $network,
            $observer,
            $orchestrator,
            $organization,
            $package,
            $process,
            $registry,
            $related,
            $rule,
            $server,
            $service,
            $source,
            $threat,
            $tls,
            $tracing,
            $url,
            $user,
            $vulnerability,
        ]);

        $this->assertEqualsMultidimensionalCanonicalizing(
            json_decode(file_get_contents(__DIR__ . '/stubs/fields_snapshot.json'), true),
            $collection->render()->toArray()
        );
    }
}
